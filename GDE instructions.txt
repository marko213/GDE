USE AT YOUR OWN RISK!

Code and idea inspired by carykh's evolutionMATH2
https://www.youtube.com/watch?v=5N7NYc7PPf8

Note: this application SHOULD only read / write the file located at (path to the main folder)/data/level.gdat (from the location of the application) and do so only when the corresponding keys are pressed. As this is a development build, some things may (still) go wrong, so please keep from tampering with the files and folders included.

If you don't know if your system is 64- or 32-bit, the 32-bit version should work on both versions.
For linux/OS X versions please contact the developer.

If the application doesn't load, the data table may be broken. This can be fixed by:
a) Redownloading / -extracting the (path to the main folder)/data/level.gdat file (or all the files) or
b) Deleting the (path to the main folder)/data/level.gdat file and replacing it with an uncorrupted file which is also named level.gdat (made with the GDE leveleditor) or
c) Modifying the (path to the main folder)/data/level.gdat file with a text editor. The first line should read "x,y,triangle,flipped" (without the quotes) and all the other lines should be two integers seperated by commas, a comma and two other integers either with a value of one or zero, also seperated by commas from each other and the previous integers. This method is suggested only if a big level got corrupted. 

It is recommended that GDE is used with the GDE leveleditor, which allows editing of levels. The GDE leveleditor can be found near the GDE download. Instructions on integrating the GDE leveleditor with GDE and on the usage of the GDE leveleditor are included in the download.

Usage / controls:

Pressing the SPACE or 'P' key will pause / unpause the simulation (does not affect ASAP mode).

Pressing the 'R' key will restart the current run.

Pressing the 'L' key will load the level from the (path to the main folder)/data/level.gdat file and restart the level. This is also done when launching the application.

Pressing the 'N' key will cycle trough the network draw modes: draw all, draw normal nodes & output and only draw output.

Pressing the '+' and '-' keys will allow you to change the speed of the simulation from normal (1x) speed up to 512x speed.
Note: a maximum of 60 creatures per second (1 creature per frame) can be drawn, the lower limit depends on the system.

Pressing the 'O' key will trigger a debug output to be printed to the java standard output (can usually be seen from a command prompt window / terminal / etc. if executed from it).

Pressing the 'E' key will toggle the lazy evaluation mode on / off. Lazy evaluation skips about a half of the creatures from generation 2 onwards. This option should only be disabled if you wish to see the creatures 2 - 100 simulated.
Note: this has a big impact on ASAP mode. Keep this option enabled if not needed otherwise.

Pressing the 'A' key or the button "Do generations ASAP" will enable ASAP mode, which processes generations faster, but gives little visual output. The speed limit for this mode is 60 generations / second (1 generation / frame), but this speed relies on the system hardware. This is practically the same as the "Do the rest of this generation ASAP" button ('G') (see below).
Note: when using this mode, it is best to enable lazy evaluation mode and to set the speed to 1x - 4x. The simulation speed DOES NOT affect the ASAP mode much (if at all), but gives a better visual on each frame.

Pressing the 'G' key or the button "Do the rest of this generation ASAP" will complete the current generation ASAP. It will not show any following creatures in that generation and will insted process them in the background. The screen may freeze in the process, but this is normal.
Note: when using this mode, it is best to enable lazy evaluation.


The game

GDE tries to simulate computer evolution in a simple platformer-like game. The game consists of a cube (the player), which is moving to the right at a constant speed. The player only has one way of control over the cube: jumping. The cube can jump when it is on the ground or on a box. Obstructing the player's path there are some obstacles: boxes and triangles. Boxes act like platforms - the cube can slide freely on them and jump off them. However, colliding with the boxes from the side or from below will kill the cube. Triangles act like very deadly spikes. Coming into contact with them from any angle, at any velocity will kill the cube.

GDE tries to learn to play this game. It uses a generic evolution structure: there are generations, which consist of creatures, which consist of nodes and connectors. Each generation has a certain amount of creatures (currently 200). Each creture is simulated independently from others in the same level. Based on how far (to the right) the  box makes it, a fitness score is assigned to the creature. When all creatures have been simulated, they are sorted by fitness - from best to worst - and then "killed" randomly: the better fitness a creature has, the better is the chance that it survives and vice versa. At the end of each generation, half of the creatures are "killed" to make room for new ones. The Remaining half of the creatures is then cloned - one clone of each surviving creature - and the clones are then mutated. By repeatng this process, the creatures (or the networks) often "evolve", making better progress in the level.


Creature components

The creatures in GDE are composed of nodes (small squares) and connectors (lines). Each node has two inputs: top and bottom. The nodes act as boolean AND gates: if both of their inputs are on, the output will be on (if the output is on, the square will be green and if the output is off, the square will be red). An exception is the output node (the rightmost in the network graph), which needs at least one of its inputs to be on, acting as a boolean OR gate. Another exception is the screen node. These have two types: box detectors (blue) and triangle detectors (yellow). Screen nodes are the "eyes" of the network: they can tell the network what is currently happening in the game. When a screen node is over an obstacle of the matching type, its output will turn on. Screen nodes can't have inputs. The inputs of nodes also act as boolean OR gates: if any of the connectors connected to that input are on, that input will be on.

The connectors connect the inputs and outputs of nodes. A normal connector (green line) will turn one of the inputs of its output node on, when its input node's output comes on. A connection can also be inverted (red line): in that case, the connector will turn one of the inputs of its output node on if its input node's output is off. As noted in the nodes section above, a connector can't turn off an input - each input acts as an OR gate.


Notes

The current included level hasn't been solved yet with the current seed in ~100 generations.

The creatures do not have any kind of memory - if any creature comes across identical sections of the level, it has to do the same for both of the sections. This can make some complicated levels impossible to beat by the GDE.

As this is a very early testing version of GDE, many bugs may occur. If the GDE does not work properly or you come across any bugs (not mentioned by the file bugs.txt), please inform the developer.

Suggestions for a better distribution of mutations (see source) is welcome.

Created with Processing 2.2.1 processing.org